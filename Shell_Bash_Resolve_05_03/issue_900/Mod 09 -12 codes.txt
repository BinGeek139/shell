#Dr. Burkman
#Mod 09 Homework

#Variable Declarations
$SODA_BASE_PRICE = 100
$payment = 0
$balance = 0


$price_variance = (Get-Random -Minimum -3 -Maximum 4 ) *5
$soda_price = $SODA_BASE_PRICE + $price_variance
$balance = $soda_price - $payment

clear
Write-Host "Welcome to the soda machine.  You can enter values of 5, 10 or 25 in payment`r`n"

while ($true)
{
    $soda_type = Read-Host -Prompt "What type of soda would you like?"
    if ($soda_type -eq "")
    {
        Write-Host "`r`nYou must enter a value.  Press Enter to try again."
        Read-Host
        clear
        continue
    }
    else
    {
        break
    }
}

clear
Write-Host "The current price of $soda_type is $soda_price cents"

while($true)
{
    $coin = Read-Host -Prompt "`r`nEnter a coin"
    clear
    if ($coin -eq 5)
    {
        Write-Host "You have inserted a nickel.`r`n"
    }
    elseif ($coin -eq 10)
    {
        Write-Host "You have inserted a dime.`r`n"
    }
    elseif ($coin -eq 25)
    {
        Write-Host "You have inserted a quarter.`r`n"
    }
    else
    {
        Write-Host "That is not a valid amount.`r`n"
        Write-Host "You still owe $balance cents"
        continue
    }

    $payment += $coin/1
    $balance = $soda_price - $payment

    if($balance -gt 0)
    {
        Write-Host "You still owe $balance cents"
    }

    elseif($balance -lt 0)
    {
        $refund = [math]::abs($balance)
        Write-host "You have been refunded $refund cents`r`n"
        break
    }

    else
    {
        break
    }
}

write-host "Enjoy your $soda_type!`r`n"

Read-Host -Prompt "Press enter to close the program"

#Dr. Burkman
#Tutorial 1

clear
Read-Host "Press enter to move from task to task"
clear

#Task 1
clear
Write-Host "Task 1`r`n"
Write-Host "Hello World"
Read-Host

#Task 2
clear
Write-Host "Task 2`r`n"
while ($true)
{
    $user_guess = Read-Host "Please enter an integer"
    try
    {
        $user_guess -eq $user_guess/1 | Out-Null
    }
    catch
    {
        #clear
        Write-Host "`r`n$user_guess is not an integer.  Press Enter to try again."
        Read-Host
        clear
        continue
    }
    if (($user_guess/1 -is [int]) -and ($user_guess -ne ""))
    {
        Write-Host "`r`nYou entered $user_guess which is an integer."
        Read-Host
        break
    }
    else
    {
        Write-Host "`r`n$user_guess is not an integer. Press Enter to try again."
        Read-Host
        clear
        continue
    }
}

#Task 3
clear
Write-Host("Task 3`r`n")
Write-Host ("$user_guess times 3 is " + ($user_guess/1*3))
read-host

#Task 4
clear
Write-Host ("Task 4`r`n")

for ($i = 1; $i -le 20; $i++)
{
    if ($i -eq 7)
    {
        Write-Host "Snowflake"
    }
    elseif ($i%2 -eq 1)
    {
        Write-Host "Odd"
    }
    else
    {
        Write-Host "Even"
    }
}
Read-Host

#Task 5
clear
Write-Host ("Task 5`r`n")
while ($true)
{
    $user_guess = Read-Host "Enter a number greater than 13"
    try
    {
        $user_guess -eq $user_guess/1 | Out-Null
    }
    catch
    {
        #clear
        Write-Host "`r`n$user_guess is not an integer.  Press Enter to try again."
        Read-Host
        clear
        continue
    }
    if (($user_guess/1 -is [int]) -and ($user_guess -ne "") -and ($user_guess/1 -gt 13))
    {
        #Write-Host "`r`nYou entered $user_guess which is an integer."
        #Read-Host
        break
    }
    else
    {
        Write-Host "`r`n$user_guess is not an appropriate choice. Press Enter to try again."
        Read-Host
        clear
        continue
    }

}

for ($i = 1; $i -le $user_guess; $i++)
{
    if ($i -eq 7)
    {
        Write-Host "Snowflake"
    }
    elseif ($i -eq 13)
    {
        Write-Host "Unlucky"
    }
    elseif ($i%2 -eq 1)
    {
        Write-Host "Odd"
    }
    else
    {
        Write-Host "even"
    }
}
Read-Host


#Task 6
clear
Write-Host ("Task 6`r`n")
while ($true)
{
    $user_name = Read-Host "Please enter a last name (Burkman)"
    if ($user_name -eq "Burkman")
    {
        break
    }
    else
    {
        continue
    }
}

#Task 7
clear
Write-Host ("Task 7`r`n")
$counter = 0
while ($counter -lt 10)
{
    Write-Host $counter
    $counter += 1


}


#Task 8
clear
Write-Host ("Task 8`r`n")
$ran_low=0
$ran_high=0

for ($i = 0; $i -lt 30; $i +=1)
{
    $my_random = Get-Random -Minimum -10 -Maximum 11
    if ($my_random -gt $ran_high)
    {
        $ran_high = $my_random
    }

    if ($my_random -lt $ran_low)
    {
        $ran_low = $my_random
    }

}

Write-Host "The lowest value was $ran_low and the highest value was $ran_high"

Read-Host "`r`nPress Enter to end the script"

#Dr. Burkman
#Mod 10 Homework

#declare and fill the four suits for the deck
$spades = @(
'Ace of Spades', 'King of Spades',
'Queen of Spades', 'Jack of Spades',
'10 of Spades', '9 of Spades',
'8 of Spades', '7 of Spades',
'6 of Spades', '5 of Spades',
'4 of Spades', '3 of Spades',
'2 of Spades')

$diamonds = @(
'Ace of Diamonds', 'King of Diamonds',
'Queen of Diamonds', 'Jack of Diamonds',
'10 of Diamonds', '9 of Diamonds',
'8 of Diamonds', '7 of Diamonds',
'6 of Diamonds', '5 of Diamonds',
'4 of Diamonds', '3 of Diamonds',
'2 of Diamonds')

$clubs = @(
'Ace of Clubs', 'King of Clubs',
'Queen of Clubs', 'Jack of Clubs',
'10 of Clubs', '9 of Clubs',
'8 of Clubs', '7 of Clubs',
'6 of Clubs', '5 of Clubs',
'4 of Clubs', '3 of Clubs',
'2 of Clubs')

$hearts = @(
'Ace of Hearts', 'King of Hearts',
'Queen of Hearts', 'Jack of Hearts',
'10 of Hearts', '9 of Hearts',
'8 of Hearts', '7 of Hearts',
'6 of Hearts', '5 of Hearts',
'4 of Hearts', '3 of Hearts',
'2 of Hearts')

#declare the play suits
$Global:play_spades = @()
$Global:play_diamonds = @()
$Global:play_clubs = @()
$Global:play_hearts = @()

function new_deck ()
{
    foreach ($i in $spades)
    {
        $Global:play_spades += $i
    }
        foreach ($i in $diamonds)
    {
        $Global:play_diamonds += $i
    }
        foreach ($i in $clubs)
    {
        $Global:play_clubs += $i
    }
        foreach ($i in $hearts)
    {
        $Global:play_hearts += $i
    }
    $Global:spades_gone=0
    $Global:diamonds_gone=0
    $Global:clubs_gone=0
    $Global:hearts_gone=0
}

function remove_card ($array, $card_to_remove)
{
    $temp_array = @()
    for ($i=0; $i -lt $card_to_remove; $i++)
    {
        $temp_array += $array[$i]
    }
    for ($i=$card_to_remove+1; $i -lt $array.Count; $i++)
    {
        $temp_array += $array[$i]
    }
    return $temp_array 
}

function get_card ()
{
    clear
    #check for valid input
    $cards_requested = Read-Host "How many cards would you like to draw from this deck?"
    if ($cards_requested -notmatch "^[+]?[0-9]" -or $cards_requested -ne [int]$cards_requested)
    {
        clear
        Write-Host "Invalid Option.  Press Enter to return to the main menu:"
        Read-Host
        return
    }

	#see if there are enough cards in the deck to meet the request
    #write-host $play_spades.Count $play_diamonds.Count $play_clubs.count $play_hearts.Count
    $cards_remaining = $play_spades.Count + $play_diamonds.Count + $play_clubs.Count + $play_hearts.Count
    if ($cards_requested/1 -gt $cards_remaining)
    {
        clear
        write-host "There are only $cards_remaining cards left in the deck but you have requested $cards_requested."
        write-host "`r`nPress the Enter key to return to the main menu: "
        Read-Host
        return
    }
    Write-Host "Your cards are:`r`n"

    #loop and get the number of requested cards
    while ($cards_requested -gt 0)
    {
        if ($spades_gone -eq 1 -and $diamonds_gone -eq 1 -and $clubs_gone -eq 1 -and $hearts_gone -eq 1)
        {
            Write-Host "All the cards have been drawn from this deck"
            break
        }
        
        #get a random suit
        $suit = Get-Random -Minimum 0 -Maximum 4
        if ($suit -eq 0)
        {
            $suit_count = $play_spades.Count
            if ($suit_count -eq 0)
            {
                $spades_gone = 1
                continue
            }
            else
            {
                $card = Get-Random -Minimum 0 -Maximum ($suit_count)
                if ($play_spades.count -eq 1){
                Write-Host $play_spades
                $Global:play_spades = @()
                $cards_requested = $cards_requested - 1
                continue
            }
            Write-Host $play_spades[$card]
            if ($play_spades.count -gt 1)
            {
                $Global:play_spades = remove_card -array $play_spades -card_to_remove $card}
                $cards_requested = $cards_requested - 1
            }
        }
        if ($suit -eq 1)
        {
            $suit_count = $play_diamonds.Count
            if ($suit_count -eq 0)
            {
                $diamonds_gone = 1
                continue
            }
            else
            {
                $card = Get-Random -Minimum 0 -Maximum ($suit_count)
                if ($play_diamonds.count -eq 1){
                Write-Host $play_diamonds
                $Global:play_diamonds = @()
                $cards_requested = $cards_requested - 1
                continue
            }
            Write-Host $play_diamonds[$card]
            if ($play_diamonds.count -gt 1)
            {
                $Global:play_diamonds = remove_card -array $play_diamonds -card_to_remove $card}
                $cards_requested = $cards_requested - 1
            }
        }
        if ($suit -eq 2)
        {
            $suit_count = $play_clubs.Count
            if ($suit_count -eq 0)
            {
                $clubs_gone = 1
                continue
            }
            else
            {
                $card = Get-Random -Minimum 0 -Maximum ($suit_count)
                if ($play_clubs.count -eq 1){
                Write-Host $play_clubs
                $Global:play_clubs = @()
                $cards_requested = $cards_requested - 1
                continue
            }
            Write-Host $play_clubs[$card]
            if ($play_clubs.count -gt 1)
            {
                $Global:play_clubs = remove_card -array $play_clubs -card_to_remove $card}
                $cards_requested = $cards_requested - 1
            }
        }
        if ($suit -eq 3)
        {
            $suit_count = $play_hearts.Count
            if ($suit_count -eq 0)
            {
                $hearts_gone = 1
                continue
            }
            else
            {
                $card = Get-Random -Minimum 0 -Maximum ($suit_count)
                if ($play_hearts.count -eq 1){
                Write-Host $play_hearts
                $Global:play_hearts = @()
                $cards_requested = $cards_requested - 1
                continue
            }
            Write-Host $play_hearts[$card]
            if ($play_hearts.count -gt 1)
            {
                $Global:play_hearts = remove_card -array $play_hearts -card_to_remove $card}
                $cards_requested = $cards_requested - 1
            }
        }



    }


Read-Host


}

#get the new deck for the first time
new_deck


while ($true)
{
	clear
	Write-Host ("
Welcome to the card deck simulator.

Please select from the following options:

	1.  Draw a selected number of cards from the current deck
	2.  Get a new deck of cards
	3.  Exit
")

$user_menu_choice = read-host "Option#" 

if ($user_menu_choice -eq 1)
{
    get_card
}
elseif ($user_menu_choice -eq 2)
{
    new_deck
}
elseif ($user_menu_choice -eq 3)
{
    clear
    break
}
else
{
    clear
    read-host "That is not a valid selection.  Press Enter to continue"
}



}

#Mod 10 Tutorial
#Dr. Burkman

$input_counter = 0
$myArray = @()

$myArray = @('seven', '7', '120', 'monkey', 'cat', 'the', 'heck', '3.1', '-1384', 'banana')



#This function randomly inserts whatever is passed to it into the string.
function RandoInsert($myArray, $thingBeingInserted)
{
    $tempArray = @()
    $indexPosition = Get-Random -Minimum 0 -Maximum ($myArray.Length + 1)
    if($indexPosition -eq 0)
    {
        $tempArray += $thingBeingInserted
        for($i = 0;$i -lt $myArray.Length;$i++)
        {
            $tempArray += $myArray[$i]
        }        
        return $tempArray
    }
    elseif($indexPosition -ge $myArray.Length)
    {
        for($i = 0;$i -lt $myArray.Length;$i++)
        {
            $tempArray += $myArray[$i]
        }
        $tempArray += $thingBeingInserted
        return $tempArray
    }
    else
    {
        for($i = 0;$i -lt $indexPosition;$i++)
        {
            $tempArray += $myArray[$i]
        }
        $tempArray += $thingBeingInserted
        for($i = $indexPosition;$i -lt $myArray.Length;$i++)
        {
            $tempArray += $myArray[$i]
        }
        return $tempArray
    }
}





clear
Read-Host "Press enter to move from task to task"
clear


<#

#Task 1
#Fill the list with user input
clear
Write-Host "Task 1`r`n"
Write-Host ("Create an array filled with some words and numbers")
while ($input_counter -lt 10)
{
    $user_input = Read-Host "Please enter a number or word"
    $myArray += $user_input
    $input_counter += 1
}

#>

#Task 2
#Check the list to ensure it has 10 items
clear
Write-Host "Task 2`r`n"
$myArrayLength = $myArray.Length
$boolCheck = $myArrayLength -eq 10
Write-Host ("This array has $myArrayLength items.  $boolCheck")
Read-Host

#Task 3
#Print out the array
clear
Write-Host "Task 3`r`n"
Write-Host "This is the array:"
Write-Host $myArray
Read-Host

#Task 4
#Swap the first item with the last item in the array and print it out
#clear
Write-Host "Task 4`r`n"
$firstThing = $myArray[0]
$myArray[0] = $myArray[-1]
$myArray[-1] = $firstThing
Write-Host "This is the array after swapping the first and last items:"
write-host $myArray
Read-Host

#Task 5
#Print the first 3 and last 3 items in the array
#clear
Write-Host "Task 5`r`n"
Write-Host("These are the first three and last three items in the array:")
write-host ($myArray[0..2], $myArray[-3..-1])
Read-Host

#Task 6
#Loop through and print out the individual items in the array
clear
Write-Host "Task 6`r`n"
foreach ($i in $myArray)
{
    Write-Host $i
}
Read-Host

#Task 7
#Check to see if cat is in my array and let the user know
clear
Write-Host "Task 7`r`n"
if ($myArray.Contains("cat"))
{
    Write-Host "There is a cat in my array"
}
else
{
    Write-Host "There is no cat in my array"
}
Read-Host

#Task 8
#Get the name of a Marvel character from the user and pass it to the random insert function
clear
Write-Host "Task 8`r`n"
$userHero = Read-Host "Please insert the name of a Marvel character"
$myArray = RandoInsert -myArray $myArray -thingBeingInserted $userHero
Write-Host ("The array is now: $myArray")
Read-Host

#Task 9
#Print out the index position of the hero, then the array
clear
Write-Host "Task 9`r`n"
Write-Host $userHero "is at position" $myArray.IndexOf($userHero) "in the array"
Read-Host


#Task 10
#Copy integers to new array, sort, print
clear
Write-Host "Task 10`r`n"
$intArray = @()
foreach ($i in $myArray)
{
    try
    {
        $diff = $i - [int]$i
        $i = [int]$i
        if ($diff -ne 0)
        {
            continue
        }
        else
        {
            $intArray += $i
        }
    }
    catch
    {
        continue
    }
}

$intArray = $intArray | sort
Write-Host "The integers in the original array, sorted, are: $intArray"


#Task 11
#Unpack an array of arrays
clear
Write-Host "Task 11`r`n"
$a= @(1,2,3)
$b = @("a","b","c")
$c = @(1.1, "house", 7)
$d = @($a, $b, $c)

foreach ($i in $d)
{
    foreach ($j in $i)
    {
        write $j
    }
}

Read-Host -Prompt "`r`nPress enter to close the program" 

#Mod11Tutorial
#

cls

 $lyrics_string=("Quisiera:Ayer:cambiarle:conocí:el:un:final" +
               ":cielo:al:sin:cuento|Las:sol|Y:barras:un:y" +
               ":hombre:los:sin:tragos:suelo|Un:han:santo:" +
               "sido:en:testigo|De:prision|Y:el:una:dolor:" +
               "canción:que:triste:me:sin:causaste:dueño|Y:" +
               "y:conocí:to':tus:lo:ojos:que:negros|Y:hiciste" +
               ":ahora:conmigo|Un:sí:infeliz:que:en:no:el:" +
               "puedo:amor,:vivir:que:sin:aun:ellos:no:yo|" +
               "Le:te:pido:supera|Que:al:ahora:cielo:camina" +
               ":solo:solo:un:sin:deseo|Que:nadie:en:por:tus" +
               ":todas:ojos:las:yo:aceras|Preguntándole:pueda" +
               ":a:vivir|He:Dios:recorrido:si:el:en:mundo:verdad" +
               ":entero|te:el:vengo:amor:a:existe|:decir|") 

$song1 = @();
$song2 = @();
$lyrics = @();
$duplicates = @();


#Make the array from the string
$lyrics += $lyrics_string.Split(":")

#one loop to split this into two strings
for ($i=0; $i -lt $lyrics.length; $i += 2)
{
    $song1 += $lyrics[$i]
    $song2 += $lyrics[$i+1]
}

#Build the song lyrics to print for the first song
foreach ($i in $song1)
{
    $song1_print += $i + " "
}

#Build the song lyrics to print for the second song
foreach ($i in $song2)
{
    $song2_print += $i + " "
}

#Break the lines up for both songs
$song1_print = $song1_print -replace "\|", "`r`n"
$song2_print = $song2_print -replace "\|", "`r`n"

#Print the lyrics for both songs
write-host($song1_print)
write-host($song2_print)

#Untangle strings in song1 with |
$song1_lower = @()
$tangled_pair = @()
foreach ($i in $song1)
{
    if ($i.Contains("|"))
    {
        $tangled_pair = $i.split("|")
        if ($tangled_pair[0].Length -ne 0)
        {
            $song1_lower += $tangled_pair[0].ToLower();
        }
        if ($tangled_pair[1].Length -ne 0)
        {
            $song1_lower += $tangled_pair[1].ToLower();
        }
    }
    else
    {
        $song1_lower += $i
    }

}

#Untangle strings in song2 with |
$song2_lower = @()
$tangled_pair = @()
foreach($i in $song2)
{
    if ($i.Contains("|"))
    {
        $tangled_pair = $i.split("|")
        if($tangled_pair[0].length -ne 0)
        {
            $song2_lower += $tangled_pair[0].ToLower();
        }
        if ($tangled_pair[1].length -ne 0)
        {
            $song2_lower += $tangled_pair[1].ToLower();
        }
    }
    else
    {
        $song2_lower += $i
    }
}

#Collect the duplicates into song 3
$song3 = @()
foreach ($j in $song1_lower)
{

    if ($song2_lower.Contains($j))
    {
        if (-Not $song3.Contains(($j.tolower())))
        {
            $song3 += $j.ToLower()
        }

    }

}

$song3 = $song3 | sort

write-host $song3

$name_list = @('Constance Castillo', 'Kerry Goodwin',
 'Dorothy Carson', 'Craig Williams', 'Daryl Guzman', 'Sherman Stewart',
 'Marvin Collier', 'Javier Wilkerson', 'Lena Olson', 'Claudia George',
 'Erik Elliott', 'Traci Peters', 'Jack Burke', 'Jody Turner',
 'Kristy Jenkins', 'Melissa Griffin', 'Shelia Ballard', 'Armando Weaver',
 'Elsie Fitzgerald', 'Ben Evans', 'Lucy Baker', 'Kerry Anderson',
 'Kendra Tran', 'Arnold Wells', 'Anita Aguilar', 'Earnest Reeves',
 'Irving Stone', 'Alice Moore', 'Leigh Parsons', 'Mandy Perez',
 'Rolando Paul', 'Delores Pierce', 'Zachary Webster', 'Eddie Ward',
 'Alvin Soto', 'Ross Welch', 'Tanya Padilla', 'Rachel Logan',
 'Angelica Richards', 'Shelley Lucas', 'Alison Porter', 'Lionel Buchanan',
 'Luis Norman', 'Milton Robinson', 'Ervin Bryant', 'Tabitha Reid',
 'Randal Graves', 'Calvin Murphy', 'Blanca Bell', 'Dean Walters',
 'Elias Klein', 'Madeline White', 'Marty Lewis', 'Beatrice Santiago',
 'Willis Tucker', 'Diane Lloyd', 'Al Harrison', 'Barbara Lawson',
 'Jamie Page', 'Conrad Reynolds', 'Darnell Goodman', 'Derrick Mckenzie',
 'Erika Miller', 'Tasha Todd', 'Aaron Nunez', 'Julio Gomez',
 'Tommie Hunter', 'Darlene Russell', 'Monica Abbott', 'Cassandra Vargas',
 'Gail Obrien', 'Doug Morales', 'Ian James', 'Jean Moran',
 'Carla Ross', 'Marjorie Hanson', 'Clark Sullivan', 'Rick Torres',
 'Byron Hardy', 'Ken Chandler', 'Brendan Carr', 'Richard Francis',
 'Tyler Mitchell', 'Edwin Stevens', 'Paul Santos', 'Jesus Griffith',
 'Maggie Maldonado', 'Isaac Allen', 'Vanessa Thompson', 'Jeremy Barton',
 'Joey Butler', 'Randy Holmes', 'Loretta Pittman', 'Essie Johnston',
 'Felix Weber', 'Gary Hawkins', 'Vivian Bowers', 'Dennis Jefferson',
 'Dale Arnold', 'Joseph Christensen', 'Billie Norton', 'Darla Pope',
 'Tommie Dixon', 'Toby Beck', 'Jodi Payne', 'Marjorie Lowe',
 'Fernando Ballard', 'Jesse Maldonado', 'Elsa Burke', 'Jeanne Vargas',
 'Alton Francis', 'Donald Mitchell', 'Dianna Perry', 'Kristi Stephens',
 'Virgil Goodwin', 'Edmund Newton', 'Luther Huff', 'Hannah Anderson',
 'Emmett Gill', 'Clayton Wallace', 'Tracy Mendez', 'Connie Reeves',
 'Jeanette Hansen', 'Carole Fox', 'Carmen Fowler', 'Alex Diaz',
 'Rick Waters', 'Willis Warren', 'Krista Ferguson', 'Debra Russell',
 'Ellis Christensen', 'Freda Johnston', 'Janis Carpenter', 'Rosemary Sherman',
 'Earnest Peters', 'Kelly West', 'Jorge Caldwell', 'Moses Norris',
 'Erica Riley', 'Ray Gordon', 'Abel Poole', 'Cary Boone',
 'Grant Gomez', 'Denise Chapman', 'Vernon Moran', 'Ben Walker',
 'Francis Benson', 'Andrea Sullivan', 'Wayne Rice', 'Jamie Mason',
 'Jane Figueroa', 'Pat Wade', 'Rudy Bates', 'Clyde Harris',
 'Andre Mathis', 'Carlton Oliver', 'Merle Lee', 'Amber Wright',
 'Russell Becker', 'Natalie Wheeler', 'Maryann Miller', 'Lucia Byrd',
 'Jenny Zimmerman', 'Kari Mccarthy', 'Jeannette Cain', 'Ian Walsh',
 'Herman Martin', 'Ginger Farmer', 'Catherine Williamson', 'Lorena Henderson',
 'Molly Watkins', 'Sherman Ford', 'Adam Gross', 'Alfred Padilla',
 'Dwayne Gibson', 'Shawn Hall', 'Anthony Rios', 'Kelly Thomas',
 'Allan Owens', 'Duane Malone', 'Chris George', 'Dana Holt',
 'Muriel Santiago', 'Shelley Osborne', 'Clinton Ross', 'Kelley Parsons',
 'Sophia Lewis', 'Sylvia Cooper', 'Regina Aguilar', 'Sheila Castillo',
 'Sheri Mcdonald', 'Lynn Hodges', 'Patrick Medina', 'Arlene Tate',
 'Minnie Weber', 'Geneva Pena', 'Byron Collier', 'Veronica Higgins',
 'Leo Roy', 'Nelson Lopez')


function option_1 () 
{
    clear
    $name_counter = 0
    $first_name_begins_with = read-host -Prompt "`r`nEnter the first name, or a partial start of the first name"
    write-host
    $first_name_begins_with = (Get-Culture).TextInfo.ToTitleCase($first_name_begins_with.ToLower())
    foreach($i in $name_list)
    {
        if($i.StartsWith($first_name_begins_with))
        {
         Write-Host $i
         $name_counter += 1
        }
    }
    if($name_counter -eq 0)
    {
        write-host 'No first names were found starting with' (Get-Culture).TextInfo.ToTitleCase($first_name_begins_with.ToLower())
    }
    write-host "`r`nPress Enter to return to the previous menu"
    Read-Host
}

function option_2 () 
{
    clear
    $name_split = @()
    $name_counter = 0
    $last_name_begins_with = read-host -Prompt "`r`nEnter the last name, or a partial start of the last name"
    write-host
    $last_name_begins_with = (Get-Culture).TextInfo.ToTitleCase($last_name_begins_with.ToLower())
    foreach($i in $name_list)
    {
        $name_split = $i.Split(" ")
        
        if($name_split[1].StartsWith($last_name_begins_with))
        {
         Write-Host $i
         $name_counter += 1
        }
    }
    if($name_counter -eq 0)
    {
        write-host 'No last names were found starting with' (Get-Culture).TextInfo.ToTitleCase($last_name_begins_with.ToLower())
    }
    write-host "`r`nPress Enter to return to the previous menu"
    Read-Host
}

function option_3($name_list)
{
    clear
    $new_first_name = Read-Host -Prompt "`r`nEnter the new first name"
    $new_last_name = Read-Host -Prompt "Enter the new last name"
    $new_name = (Get-Culture).TextInfo.ToTitleCase($new_first_name.ToLower()) + " " +
        (Get-Culture).TextInfo.ToTitleCase($new_last_name.ToLower())
    write-host
    write-host $new_name "has been added"
    $name_list += $new_name
    return $name_list
    write-host "`r`nPress Enter to return to the previous menu"
    Read-Host
}

function option_4($name_list)
{
    clear
    while ($true)
    {
        clear
        write-host
        $delete_name = Read-Host -Prompt 'Enter the full name, "1" to view names or "Q" to quit'
        $delete_name = (Get-Culture).TextInfo.ToTitleCase($delete_name.ToLower())
        if($delete_name -eq "Q")
        {
            break
        }
        if($delete_name -eq "1")
        {
            option_1
            continue
        }
        if(-Not $name_list.Contains($delete_name))
        {
            write-host "`r`n$delete_name does not exist.  Please try again.`r`n"
            continue
        }
        #delete the name
        $tempArray = @()
        $deleted_location = $name_list.IndexOf($delete_name)
        for($i = 0;$i -lt $name_list.Length;$i++)
        {
            if($i -ne $deleted_location)
            {
                $tempArray += $name_list[$i]
            }

        }
        write-host
        write-host "$delete_name has been deleted"  
        write-host "`r`nPress Enter to return to the previous menu"
        Read-Host      
        $name_list = $tempArray
        return $name_list





    }




}

While ($true)
{
    clear
    write-host "
Please select from the following options:

    1.  List all names starting with one or more letters of the first name
    2.  List all names starting with one or more letters of the last name
    3.  Add a name
    4.  Delete a name
    5.  Exit"

    $user_menu_choice = Read-Host -Prompt "`r`nOption #"

    if ($user_menu_choice -eq "1")
    {
        option_1
        continue
    }
    elseif ($user_menu_choice -eq "2")
    {
        option_2
        continue
    }
    elseif ($user_menu_choice -eq "3")
    {
        $name_list = option_3 -name_list $name_list
        continue
    }
    elseif ($user_menu_choice -eq "4")
    {
        $name_list = option_4 -name_list $name_list
        continue
    }
    elseif ($user_menu_choice -eq "5")
    {
        break
    }
    else
    {
        write-host "`r`nThat is not a valid option.  Please try again."
        continue
    }
}

cls

$lyrics_string=("Quisiera:Ayer:cambiarle:conocí:el:un:final" +
               ":cielo:al:sin:cuento|Las:sol|Y:barras:un:y" +
               ":hombre:los:sin:tragos:suelo|Un:han:santo:" +
               "sido:en:testigo|De:prision|Y:el:una:dolor:" +
               "canción:que:triste:me:sin:causaste:dueño|Y:" +
               "y:conocí:to':tus:lo:ojos:que:negros|Y:hiciste" +
               ":ahora:conmigo|Un:sí:infeliz:que:en:no:el:" +
               "puedo:amor,:vivir:que:sin:aun:ellos:no:yo|" +
               "Le:te:pido:supera|Que:al:ahora:cielo:camina" +
               ":solo:solo:un:sin:deseo|Que:nadie:en:por:tus" +
               ":todas:ojos:las:yo:aceras|Preguntándole:pueda" +
               ":a:vivir|He:Dios:recorrido:si:el:en:mundo:verdad" +
               ":entero|te:el:vengo:amor:a:existe|:decir|") 


$song1 = @();
$song2 = @();
$song3 = @();
$lyrics = @();
$song1_print = "";
$song2_print = "";
$duplicates = @();

#Making the array from the string
$lyrics += $lyrics_string.Split(":")

#One loop to split this into two strings
for($i=0;$i -lt $lyrics.Length; $i += 2)
{
    $song1 += $lyrics[$i]
    $song2 += $lyrics[$i+1]
}

#Build the song lyrics to print for the first song
foreach($i in $song1)
{
    $song1_print += $i + " "
    #write-host ($song1_print)
}

#Build the song lyrics to print for the second song
foreach($i in $song2)
{
    $song2_print += $i + " "
    #write-host ($song1_print)
}

#Break the lines up for both songs
$song1_print = $song1_print -Replace "\|", "`r`n"
$song2_print = $song2_print -Replace "\|", "`r`n"

#Print the lyrics for both songs
write-host($song1_print)
write-host($song2_print)

#Check for duplicate words

#Untangle strings in song1 with |
$song1_lower = @()
$tangled_pair = @()
foreach($i in $song1){
    if ($i.Contains("|"))
    {
        $tangled_pair = $i.Split("|")
        if($tangled_pair[0].length -ne 0)
        {
            $song1_lower += $tangled_pair[0].ToLower();
        }
        if($tangled_pair[1].length -ne 0)
        {
            $song1_lower += $tangled_pair[1].ToLower();
        }
    }
    else
    {
        $song1_lower += $i
    }
}

#Untangle strings in song2 with |
$song2_lower = @()
$tangled_pair = @()
foreach($i in $song2){
    if ($i.Contains("|"))
    {
        $tangled_pair = $i.Split("|")
        if($tangled_pair[0].length -ne 0)
        {
            $song2_lower += $tangled_pair[0].ToLower();
        }
        if($tangled_pair[1].length -ne 0)
        {
            $song2_lower += $tangled_pair[1].ToLower();
        }
    }
    else
    {
        $song2_lower += $i
    }
}

#Collect the duplicates into song3
$song3 = @()
foreach($j in $song1_lower)
{
    if($song2_lower.Contains($j))
    {
        if(-Not $song3.Contains(($j.ToLower())))
        {
            $song3 += $j.ToLower()
        }
    }
}
$song3 = $song3 | sort

write-host("Words that are in both songs:`r`n")
write-host $song3


#Mod 12 Tutorial

Read-Host -Prompt "`r`nPress any key to exit"

$employee_string="Rudy T. Navarro,586 New St.,Anchorage,Jennie K. Carlson,468 West Old Drive,Charlotte,Kristine Z. Blackwell,363 Yellow Duck Way,Fresno,Ivan N. Marquez,876 Rocky Second Street,Yonkers,Clarence H. Baird,915 North Nobel St.,San Antonio,Tia J. Li,780 Rocky Cherrywood Street,Indianapolis,Tammy O. Holder,882 West Crabapple Avenue,Toledo,Nicole K. Perkins,58 Old St.,El Paso,Spencer M. Cross,48 North Narwhal St.,Atlanta,Robin T. Fernandez,51 West Rocky Lakeridge St.,Grand Rapids,Cindy J. Oconnor,925 Green New Parkway,Atlanta,Ian K. Sosa,117 Oak Way,Toledo,Betsy O. Rowland,60 Nobel Road,Omaha,Jeremiah E. Sexton,247 North First Street,Las Vegas,Yvette U. Gomez,159 Nobel Drive,Grand Rapids,Marisol F. Henderson,988 Rocky Oak Avenue,Mobile,Deborah C. Mayer,86 South Yellow New Street,Columbus,Wendell H. Coffey,85 South Rocky Crabapple Blvd.,Atlanta,Robin W. Frederick,310 Oak St.,Jackson,Chrystal I. Bowers,726 Second Road,San Antonio,Norma L. Sexton,86 Cherrywood Drive,Cleveland,Lea R. Kirby,87 New Parkway,Seattle,Jessica M. Cline,31 Green Fabien Road,Anchorage,Maggie P. Cortez,348 East Oak Road,Jackson,Levi Z. Riddle,979 Rocky Fabien Road,Tacoma,Melanie I. Trevino,304 Hague Avenue,Virginia Beach,Loren O. Pineda,97 Milton St.,Philadelphia,Jesse H. Adkins,15 Cherrywood Way,Bakersfield,Garry A. Allen,309 Green Elm Street,Hialeah,Victoria R. Olson,397 South Hague Avenue,Seattle,Roland E. Buchanan,828 Green New Parkway,Fort Worth,Austin C. Roman,423 New Boulevard,Columbus,Debra B. Mullins,164 South Rocky Second Drive,Atlanta,Perry G. Gonzales,443 New Way,Greensboro,Tracey Z. Collier,87 Rocky Narwhal Avenue,Dallas,Janice X. Waller,122 Nobel St.,Louisville,Lillian N. Sullivan,20 Green Narwhal Avenue,Tacoma,Glenda E. Herrera,757 Cowley Blvd.,Tampa,Courtney B. Leblanc,316 North Cherrywood Road,Kansas,Connie C. Spencer,52 Crabapple Way,Los Angeles,Ricky P. Nichols,117 Duck Avenue,Miami,Lamar G. Aguilar,246 Rocky Lakeridge Boulevard,Spokane,Elisabeth S. Moran,608 Second Avenue,Albuquerque,Ethan C. Juarez,53 Green Fabien Avenue,Hialeah,Marcus X. Underwood,20 North Duck Road,Colorado,Gina C. Davies,203 First Road,Fremont,Allan D. Scott,95 South Oak Parkway,Glendale,Cara S. Delgado,841 West First Way,Arlington,Patrick Q. Watts,403 South Rocky Lakeridge Boulevard,Buffalo,Roger F. Lawrence,344 Rocky Fabien Freeway,Montgomery,Bryan M. Bruce,206 South Oak Boulevard,New York,Samantha E. Hansen,511 North Lakeridge Freeway,Portland,Tanya D. Riley,593 Green Crabapple Freeway,San Antonio,Erika F. Ramsey,70 West Green Duck Parkway,Sacramento,Colby F. Page,695 Duck Way,Mesa,Theodore G. Burton,290 First Street,Omaha,Lorie W. Finley,35 South Rocky Nobel Freeway,Virginia Beach,Traci V. Charles,69 Yellow Lakeridge Parkway,Memphis,Beth P. Hanna,91 East Rocky Cowley Street,Fort Worth,Tricia W. Payne,12 Yellow Oak Avenue,Mesa,Laurie N. Fields,729 Green Cowley Drive,Aurora,Tommy U. Hudson,196 Cherrywood Avenue,Stockton,Shawn P. Parrish,579 First Street,Jackson,Kent F. Harrington,46 Lakeridge Freeway,Des Moines,Garry G. Mcintyre,79 Yellow First Avenue,Toledo,Janette D. Gordon,65 East Rocky Old Drive,Baton Rouge,Christian T. Hanna,208 Oak Way,St. Petersburg,Kerri N. Hampton,791 Rocky Milton Way,Buffalo,Bradley L. Powell,607 Duck Street,Newark,Dion M. Rangel,544 Yellow Fabien Parkway,El Paso,Shauna Y. Tyler,30 Yellow Hague Boulevard,Washington,Shirley J. Kelly,917 Rocky Old Blvd.,Fort Worth,Preston L. Zuniga,337 East Cherrywood Drive,Memphis,Oliver D. Hodges,608 Rocky First Road,San Diego,Marcella F. Hays,54 Rocky Crabapple St.,Shreveport,Rick E. Herrera,109 Rocky Narwhal Boulevard,San Jose,Loretta A. Parrish,36 West Nobel Street,St. Petersburg,Scotty U. Crawford,773 Rocky Fabien Road,El Paso,Jeff J. Sandoval,258 West Green Cowley St.,Fresno,Bryan M. French,86 Nobel Boulevard,San Diego,Felicia Y. Rasmussen,214 South Green Hague Boulevard,Fort Worth,Kate X. Valdez,454 Cowley Boulevard,Oakland,Tommy F. Reese,48 Second Way,Nashville,Leon Y. Warren,884 Oak Parkway,Spokane,Raul J. Jenkins,85 Yellow Narwhal Blvd.,Albuquerque,Darius T. Luna,876 First Freeway,Tampa,Tonia X. Gilmore,146 Cherrywood Road,Washington,Katina R. Brady,923 Rocky Elm Drive,Norfolk,Timothy R. Snyder,412 Old St.,Los Angeles,Jesse P. Ochoa,33 Yellow Fabien Parkway,Des Moines,Ronnie O. Cochran,508 East Yellow Hague Way,Hialeah,Shad P. Krueger,721 Old Street,Omaha,Dean Y. Bruce,905 Narwhal Road,Denver,Bobbie C. Cochran,96 Yellow Cherrywood Way,Garland,Gustavo L. Cohen,88 Yellow Second Way,Charlotte,Alberto A. Shepard,25 North Hague Blvd.,Riverside,Janelle E. Larson,968 Yellow Old Boulevard,Dallas,Veronica F. Wagner,130 Hague Blvd.,Tampa,Anita U. Padilla,82 Hague Blvd.,Mobile,Lorraine Z. Clements,573 Green Crabapple Way,Glendale,Tasha F. Pearson,97 Green Duck Freeway,Spokane,Lawrence G. Cordova,972 Elm Boulevard,Dayton,Blanca J. Oneal,122 Yellow Milton Way,Jacksonville,Brandie K. Smith,987 Fabien Way,Tacoma,Dan G. Ortiz,236 East Rocky New Drive,Philadelphia,Marisa K. Walters,896 Green Oak St.,Cincinnati,Jimmie D. Green,76 First Avenue,Tampa,Kareem N. Ritter,754 West Fabien Boulevard,Yonkers,Tyrone R. Castillo,450 Rocky Second St.,Sacramento,Lori W. Carroll,62 Rocky Oak Freeway,Madison,Maggie M. French,24 Clarendon Freeway,Oklahoma,Bethany G. Oliver,24 Rocky Milton Parkway,Chicago,Roberta Q. Santana,762 East Clarendon Avenue,Louisville,Nicholas Q. Conley,997 Nobel Freeway,St. Petersburg,Anita U. Mack,647 Yellow Milton Blvd.,Fresno,Larry B. Sampson,87 Green Narwhal Avenue,Little Rock,Ian A. Klein,266 New Street,Columbus,Aisha H. Contreras,46 Yellow Narwhal Drive,Denver,Kari D. Schaefer,895 Green Cowley Way,Long Beach,Gabrielle K. Archer,44 North Nobel Freeway,Norfolk,Andrew T. Bird,20 North Oak Freeway,Phoenix,Cara V. Atkinson,553 West Narwhal Boulevard,Mobile,Susan M. Mcdaniel,530 Lakeridge Street,Fresno,Ralph O. Hatfield,20 First Parkway,Pittsburgh,Cody E. Woodard,515 Oak Boulevard,Memphis,Lewis P. Huynh,542 Narwhal Drive,Long Beach,Wendell R. Carey,739 Nobel Parkway,Tucson,Dennis U. Morris,86 North Cherrywood Freeway,Little Rock,William J. Dean,25 South Rocky Crabapple Blvd.,Dayton,Anitra N. Carson,702 First St.,Sacramento,Anthony V. Bean,42 South Hague Avenue,Portland,Aimee Y. Cummings,90 First Parkway,Las Vegas,Joan N. Cisneros,16 Green Hague Drive,Tampa,Josh Z. Murillo,535 Milton Freeway,Garland,Vincent Z. Adkins,94 Yellow New Parkway,Fremont,Colby X. Barron,44 East Rocky Lakeridge Drive,Albuquerque,Deborah I. Lynch,806 Nobel Freeway,Los Angeles,Kyle A. Holden,280 Yellow Nobel Boulevard,Mesa,Rickey F. Duncan,676 Rocky New Boulevard,Riverside,Marlon T. Brennan,28 West First Blvd.,Los Angeles,Cari E. Fleming,31 East Second Street,Tacoma,Michele Y. Gonzalez,73 Second Road,Buffalo,Adrienne X. Mora,52 East Hague Blvd.,St. Petersburg,Derek R. Baird,47 Yellow Duck Road,Miami,Lakesha K. Rojas,47 Yellow Clarendon St.,Miami,Alana G. Bishop,862 East Hague Road,Miami,Cassie I. Mejia,18 Green Nobel Blvd.,Des Moines,Nikki D. Petersen,13 New Parkway,Akron,Keisha T. Spears,78 Second Way,Cincinnati,Johnathan J. Suarez,659 Lakeridge Freeway,Lincoln"

$employee_array = @()

#TASK 1

#make path to the user desktop
$user_path = "C:\Users\" + $env:UserName + "\Desktop"
Set-Location $user_path

#turn the big string into a handy array
$employee_array = $employee_string.Split(",")

#write the header
Write-Output ("Name,Address,State") | Out-File "employee_data.csv" -encoding ascii

#write the data
for ($i=0; $i -lt $employee_array.Count; $i = $i + 3)
{
    Write-output ($employee_array[$i] + "," +
    $employee_array[$i+1] + "," +
    $employee_array[$i+2]) | Out-File "employee_data.csv" -encoding ascii -Append
}

#TASK 2
$employee_by_city = @()
$file = ".\employee_data.csv"

#make array of city arrays
foreach ($line in Get-Content $file)
{
    $split1 = $line.Split(",")
    $city = $split1[2].trim(" ")
    $employee_by_city += ,@($city + ": ")
}

#unique sort the city array 
$employee_by_city = $employee_by_city | sort -Unique

#add last names to city arrays
foreach ($line in Get-Content $file  )
{
    if ($line.ReadCount -eq 1)
    {
        continue
    }
    $split1 = $line.Split(",")
    $full_name = $split1[0]
    $last_name = $full_name.Split(" ")[2]
    $last_name = $last_name.Trim(" ")
    $city = $split1[2].trim(" ")
    for ($i=0; $i -lt $employee_by_city.Count; $i ++)
    {
        if ($city + ": " -eq $employee_by_city[$i][0])
        {
            $employee_by_city[$i] += $last_name
        }

    }
}

#write out the array elements
foreach ($i in $employee_by_city)
{
    write-host $i
}


#TASK 3


#check for archives subdirectory off desktop, make if not there
if (-Not (Test-Path .\archives_Burkman))
{
 mkdir .\archives_Burkman | Out-Null
}

#make a zip file of the csv in the archives subdirectory
$zipfile = @{
  Path = "employee_data.csv"
  CompressionLevel = "Fastest"
  DestinationPath = ".\archives_Burkman\empdata01"
}
Compress-Archive @zipfile -Force

#remove the csv file from the desktop
del .\employee_data.csv

#check for the extracted files subdirectory
if (-Not (Test-Path .\extracted_files_Burkman))
{
 mkdir .\extracted_files_Burkman | Out-Null
}

#unzip the csv file into the extracted_file subdirectory
Expand-Archive -Path .\archives_Burkman\empdata01.zip -DestinationPath .\extracted_files_Burkman -Force

#pause
Read-Host "`r`nPress Enter to exit the script"

#Mod 12 Homework
#make a path to the desktop
#make path to the user desktop
$user_path = "C:\Users\" + $env:UserName + "\Desktop"
Set-Location $user_path


#set up my .csv output file with column headers
Write-Output ("Date,Time,Priority,Classification,Description,Source IP,Destination IP") | Out-File "alert_data.csv" -encoding ascii

#read the pcap file, extract data, write to my .csv output file
$file = ".\fast_short.pcap"
foreach ($line in Get-Content $file  )
{
    $split1 = $line.Split("[**]") 
    $date_time = $split1[0]           #date/time
    $attack_date = ($date_time.substring(0,5))  #date
    $attack_time = $date_time.Substring(6,5)
    $description = $split1[6].Trim(" ")
    $classification =  $split1[11].Substring(16)
    $priority = $split1[13].Substring(10,1)
    $iparray = $split1[14].trim(" ")
    $iparray = $iparray.Split(" -> ")
    $sourceip = $iparray[1]
    $destip = $iparray[5]


    Write-output (
    $attack_date + "," +
    $attack_time + "," +
    $priority + "," +
    $classification + "," +
    $description + "," +
    $sourceip + "," +
    $destip) | Out-File "alert_data.csv" -encoding ascii -Append
}

read-host "Processing is done.  Press enter to close the script"